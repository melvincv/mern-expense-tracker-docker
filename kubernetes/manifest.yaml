---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: expense-tracker-server
  namespace: expensetracker
  labels:
    d-app: et-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: et-server
  template:
    metadata:
      labels:
        app: et-server
    spec:
      containers:
      - name: et-server
        image: melvincv/expense-tracker-server
        env:
        - name: MONGO_URI
          valueFrom:
            secretKeyRef:
              name: mongo.sec
              key: mongo.url
        ports:
        - containerPort: 5000
          protocol: TCP
        resources:             # Because if limits = requests then QoS is set to "Guaranteed"
          limits:
            memory: "500Mi"    # If container uses over 500MB it is killed (OOM)
            #cpu: "2"          # Not normally needed, unless you need to protect other workloads or QoS must be "Guaranteed"
          requests:
            memory: "256Mi"    # Scheduler finds a node where 500MB is available
            cpu: "250m"           # Scheduler finds a node where 1 vCPU is available
        # per-container security context
        # lock down privileges inside the container
        securityContext:
          allowPrivilegeEscalation: false # prevent sudo, etc.
          privileged: false               # prevent acting like host root
      terminationGracePeriodSeconds: 300 # default is 30, but you may need more time to gracefully shutdown (HTTP long polling, user uploads, etc)

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: expense-tracker-client
  namespace: expensetracker
  labels:
    d-app: et-client
spec:
  replicas: 1
  selector:
    matchLabels:
      app: et-client
  template:
    metadata:
      labels:
        app: et-client
    spec:
      containers:
      - name: et-client
        image: melvincv/expense-tracker-client
        ports:
        - containerPort: 80
          protocol: TCP
        resources:             # Because if limits = requests then QoS is set to "Guaranteed"
          limits:
            memory: "500Mi"    # If container uses over 500MB it is killed (OOM)
            #cpu: "2"          # Not normally needed, unless you need to protect other workloads or QoS must be "Guaranteed"
          requests:
            memory: "256Mi"    # Scheduler finds a node where 500MB is available
            cpu: "250m"           # Scheduler finds a node where 1 vCPU is available
        # per-container security context
        # lock down privileges inside the container
        securityContext:
          allowPrivilegeEscalation: false # prevent sudo, etc.
          privileged: false               # prevent acting like host root
      terminationGracePeriodSeconds: 300 # default is 30, but you may need more time to gracefully shutdown (HTTP long polling, user uploads, etc)

---
apiVersion: v1
kind: Service
metadata:
  name: et-server-service
  namespace: expensetracker
spec:
  selector:
    d-app: et-server
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000

---
apiVersion: v1
kind: Service
metadata:
  name: et-client-service
  namespace: expensetracker
spec:
  type: NodePort
  selector:
    d-app: et-client
  ports:
      # By default and for convenience, the `targetPort` is set to the same value as the `port` field.
    - port: 80
      targetPort: 80
      # Optional field
      # By default and for convenience, the Kubernetes control plane will allocate a port from a range (default: 30000-32767)
      nodePort: 30001